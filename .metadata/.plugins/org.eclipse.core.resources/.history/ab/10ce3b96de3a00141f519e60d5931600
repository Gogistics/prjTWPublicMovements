/*
 *  init ng-app controllers and the service
 *  original version was contributed by Will Huang(保哥) and modified by Alan Tai
 *  Tools: Angularjs, JQuery, Leaflet and D3 (for animation)
 *  
 *  PS: I really appreciate all the contributions; without these contributions, it's impossible to implement the application in two weeks
 *  The version is just for Demo purpose and not optimized yet, especially the async. features so please feel free to modify the project in anyways
 *  
 *   */

kp_app.value('API', {
	KEY : "kp53f5626b5f4bd7.27954991", // personal api key
	SERVER : "http://api.kptaipei.tw/v1/"
})
.controller('MainCtrl', MainController)
.controller('AlbumCtrl', AlbumController)
.controller('VideoCtrl', VideoController)
.controller('FinancialCtrl', FinancialDetailController)
.controller('PaginationCtrl', PaginationController) // dir pagination
.service('kptService', kptService);

// service for retrieving data
kptService.$injector = [ '$http', 'API' ];
function kptService($http, API) {

	// get articles category
	this.getCategory = function(id) {
		console.log(API.SERVER + "category/" + id + "?accessToken=" + API.KEY);
		return $http({
			method : "GET",
			url : API.SERVER + "category/" + id + "?accessToken=" + API.KEY
		});
	};

	// get albums category
	this.getAlbums = function(id) {
		console.log(API.SERVER + "albums/" + id + "?accessToken=" + API.KEY);
		return $http({
			method : "GET",
			url : API.SERVER + "albums/" + id + "?accessToken=" + API.KEY
		})
	};

	// get videos category
	this.getVideos = function(id) {
		console.log(API.SERVER + "videos/" + id + "?accessToken=" + API.KEY);
		return $http({
			method : "GET",
			url : API.SERVER + "videos/" + id + "?accessToken=" + API.KEY
		});
	}
	
	// get financial category
	this.getFinancialDetails = function(id){
		console.log(API.SERVER + "financial/all/?accessToken=" + API.KEY);
		return $http({
			method : "GET",
			url : API.SERVER + "financial/all/?accessToken=" + API.KEY
		});
	}
	
	/* update albums geo info stored in Google datastore */
	// handle geo-info
	this.handleAlbumsGeoInfo = function(arg_new_albums){
		var geo_info_albums = {};
		angular.forEach(arg_new_albums, function(item, ind) {
			geo_info_albums[item.id] = {
				'album_title' : item.title,
				'album_description' : item.description,
				'album_thumbnail' : item.thumbnails.medium,
				'album_link' : item.link,
				'album_lat' : 25.052063,
				'album_lng' : 121.529980
			};
		});

		// original_geo_info is defined in albums.html and retrieved from
		// database
		var diff_elems = {};
		if(typeof(original_geo_info) === 'undefined'){
			// loop through all info
			diff_elems = geo_info_albums;
			
			console.log(diff_elems);
		}
		else if(typeof(original_geo_info) !== 'undefined'
			&& typeof (geo_info_albums) !== 'undefined'){
			// get keys set for both original and new sets of albums info
			var keys_new_geo_info = Object.keys(geo_info_albums);
			var keys_original_geo_info = Object.keys(original_geo_info);
			
			// get diff keys
			diff_keys = this.getDiff(keys_new_geo_info, keys_original_geo_info);
			
			// get filtered info set
			angular.forEach(diff_keys, function(item,ind){
				diff_elems[item] = geo_info_albums[item];
			});
			
			// console.log(JSON.stringify(diff_elems, 2, 2));
		}
		
		// if there exist any key, then send new data to server for database
		// update
		if(Object.keys(diff_elems).length > 0){
			// put diff_elems into $.param and will be send to backend
			var geo_data = $.param({'geo_data':JSON.stringify(diff_elems, 2, 2)});
			
			// use $http post to send data back to server and save data in
			// Google datastore
			var response_promise = $http({
	            url: '/albums/geo_info_handler',
	            method: "POST",
	            data: geo_data,
	            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
	        });
			
			// success handler
			response_promise.success(function(data, status, headers, config) {
                console.log(data.processing_status);
            });
			// fail handler
			response_promise.error(function(data, status, headers, config) {
                console.log("AJAX failed! " + status);
            });
		}
		else{
			console.log('Nothing needs to update')
		}
	};

	// filter the new albums info; currently jQuery is doing this task
	this.getDiff = function(arg_update_geo_info, arg_original_albums_geo_info) {
		return $(arg_update_geo_info).not(arg_original_albums_geo_info).get();
	};
	// end of "handle geo-info"
	
	// simple cluster for grouping albums based on geo-location
	this.clusterAlbumsGeoLocations = function(){
		var groups;
		
		if (typeof(address_points) !== 'undefined' && address_points.length > 0){
			// init group
			groups = [];
			
			// start clusetring
			angular.forEach(address_points, function(item, ind){
				
				// if no group exists, then create one and push the first
				// element to the array
				if(groups.length <= 0){
					groups.push([item]);
				}
				else{
					// clustering process
					groups = this.clusterItem(groups, item);
				}
			}, this);
			
		}
		
		return groups; // clustering result
	};
	
	this.clusterAlbumsBasedonTime = function(){
		var groups, clusters_based_on_time;
		if(typeof(address_points) !== 'undefined' && address_points.length > 0){
			groups = {};
			angular.forEach(address_points, function(item, ind){
				if(item.album_create_datetime in groups){
					groups[item.album_create_datetime] += 1;
				}
				else{
					groups[item.album_create_datetime] = 1;
				}
			});
			
			//
			clusters_based_on_time = [];
			angular.forEach(groups, function(item, key){
				clusters_based_on_time.push({"date":key, "frequency":item});
			});
		}
		
		return clusters_based_on_time;
	}
	
	// cluster albums based on geo-location ; current version is simple and is
	// better to go through iteration for optimization
	this.clusterItem = function(arg_groups, arg_item){
		// assign new item to each group
		// var temp_groups = [];
		var evaluation_result = []; // analyze temp_groups
		
		// calculate threshold ; ary_albums_lat & ary_albums_lng from
		// albums.html
		var max_lat = Math.max.apply(Math, ary_albums_lat);
		var min_lat = Math.min.apply(Math, ary_albums_lat);
		var max_lng = Math.max.apply(Math, ary_albums_lng);
		var min_lng = Math.min.apply(Math, ary_albums_lng);
		
		var max_distance = Math.sqrt( Math.pow((max_lat - min_lat), 2) + Math.pow((max_lng - min_lng), 2)).toFixed(2);
		var threshold = (max_distance / 50).toFixed(6); // can be adjusted for
														// different results
		
		// iterate groups
		angular.forEach(arg_groups, function(group, ind){
			// puhs new item temp group for evaluation
			// group.push(arg_item);
			
			var total_amount = 0, sum_lat = 0, sum_lng = 0, avg_lat = 0, avg_lng = 0;
			angular.forEach(group, function(item, ind){
				total_amount += 1;
				sum_lat += item['album_lat'];
				sum_lng += item['album_lng'];
			});
			avg_lat = (sum_lat / total_amount).toFixed(6);
			avg_lng = (sum_lng /total_amount).toFixed(6);
			
			// calculate the distance from new address point to centroid of the
			// current group
			var distance = Math.sqrt( Math.pow((avg_lat - arg_item['album_lat']), 2) + Math.pow((avg_lng - arg_item['album_lng']), 2)).toFixed(2);
			
			// push calculated result into to evaluation array
			evaluation_result.push(Number(distance));
		});
		
		
		// find min
		var min_distance = Math.min.apply(Math, evaluation_result);
		var group_index = evaluation_result.indexOf(min_distance);
		// update groups
		if(min_distance <= threshold ){
			arg_groups[group_index].push(arg_item);
		}else{
			arg_groups.push([arg_item]);
		}
		return arg_groups;
	};

}


// handle articles categories corresponding content
MainController.$injector = [ '$sce', 'kptService' ];
function MainController($sce, kptService) {
	var vm = this;
	vm.clickOnCategory = clickOnCategory;
	vm.clickOnArticle = clickOnArticle;
	vm.categories = {};
	vm.content = $sce.trustAsHtml("請選擇文章");
	
	//
	vm.temp_articles_categories = [];

	kptService.getCategory("").success(function(results) {
		// console.log(JSON.stringify(results.data,2,2));
		var initial_category_id;
		
		angular.forEach(results.data, function(item, ind) {
			initial_category_id = initial_category_id || item.id;
			vm.categories[item.id] = item;
			vm.categories[item.id].posts = [];
			
			// get all categories
			vm.clickOnCategory(item.id);
		});
		
		// get first articles category
		// vm.clickOnCategory(initial_category_id);
	});

	
	function clickOnCategory(category_id) {
		kptService.getCategory(category_id).success(function(results) {
			// console.log(JSON.stringify(results.data, 2, 2));
			
			var initial_article;
			vm.categories[category_id].posts = [];
			angular.forEach(results.data, function(item) {
				initial_article = initial_article || item;
				vm.categories[category_id].posts.push(item);
				
			});
			
			$('#article_category_' + category_id).toggle("slow");

			vm.clickOnArticle(undefined, initial_article);
		});
	};

	// click article title to get corresponding article, then show the
	// corresponding content on the view
	function clickOnArticle($event, article) {
		if (typeof ($event) != 'undefined') {
			$event.preventDefault();
			$event.stopPropagation();
		}
		
		// set content and bind html on controller and pass it to view
		vm.content = $sce.trustAsHtml(article.content);
	};
}

// albums
AlbumController.$injector = [ '$sce', 'kptService' ];
function AlbumController($sce, kptService, $scope) {
	// sort-order param which can be changed minus sign means reverse sort order
	$scope.sort_order_param = '-title';
	$scope.album_title = ''; // album title
	
	//
	var vm = this;
	vm.albums = [];
	vm.getAlbum = getAlbum;
	vm.clickOnAlbum = clickOnAlbum;

	// init albums page
	vm.getAlbum("");

	// click event on album
	function clickOnAlbum(album_id) {
		vm.getAlbum(album_id);
	};

	function getAlbum(id) {
		kptService.getAlbums(id).success(
				function(results) {
					if (id == "") {
						vm.albums = results.data;
						// console.log(JSON.stringify(vm.albums, 2, 2));

						// build geo info. and pass the info. back to server and
						if (vm.albums.length > 0) {

							// update albums geo info
							kptService.handleAlbumsGeoInfo(vm.albums);

							// albums_clusters defined in albums.html
							albums_clusters = kptService.clusterAlbumsGeoLocations();
							albums_cluster_based_on_time = kptService.clusterAlbumsBasedonTime();
						}
						// end

						// show first album
						vm.clickOnAlbum(results.data[0].id);
					} else {
						vm.album = results.data;
						$scope.album_title = vm.album.set.title;
					}
				});
	};

	// ng-pagination
	$scope.currentPage = 1;
	$scope.pageSize = 5;
	// end of ng-pagination
}

// videos
VideoController.$injector = [ '$sce', 'kptService' ];
function VideoController($sce, kptService) {
	var vm = this;
	vm.categories = {};
	vm.clickOnCategory = clickOnCategory;
	vm.clickOnVideo = clickOnVideo;
	vm.getVideos = getVideos;

	// init
	vm.getVideos("");

	function getVideos(category_id) {
		kptService.getVideos(category_id).success(function(results) {
			var initial_category_id;
			var initial_playlist;
			if (category_id == "") {
				angular.forEach(results.data, function(item, ind) {
					initial_category_id = initial_category_id || item.id;
					vm.categories[item.id] = item;
					vm.categories[item.id].videos = [];
					
					// get all categories
					vm.clickOnCategory(item.id);
				});
				
				// show first category
				vm.clickOnCategory(results.data[0].id);
			} else {
				vm.categories[category_id].videos = [];
				angular.forEach(results.data, function(item) {
					initial_playlist = initial_playlist || item;
					vm.categories[category_id].videos.push(item);
				});
				vm.clickOnVideo(undefined, initial_playlist);
			}
		});
	}

	function clickOnCategory(category_id) {
		getVideos(category_id);

		// apply jquery toggle animation
		$('#video_category_' + category_id).toggle("slow");
	}
	;

	function clickOnVideo($event, video) {
		console.log(video);
		if (typeof ($event) != 'undefined') {
			$event.preventDefault();
			$event.stopPropagation();
		}
		vm.content = video;
		vm.content.url = $sce
				.trustAsResourceUrl('https://www.youtube.com/embed/' + video.id);
	}
	;

};

// videos
FinancialDetailController.$injector = [ '$sce', 'kptService' ];
function FinancialDetailController($sce, kptService, $scope, $q) {
	var vm = this;
	vm.getFinancialDetail = getFinancialDetail;

	// get financial detail
	vm.getFinancialDetail();

	function getFinancialDetail() {
		kptService.getFinancialDetails().success(function(results) {
			//
			vm.financial_detail = [];
			accounts = [];
			
			//
			vm.debit = [];
			vm.credit = [];
			
			vm.financial_detail = results.data;
			console.log(JSON.stringify(vm.financial_detail,2,2));
			angular.forEach(results.data, function(item, ind) {
					if(item.price != 0){
						if(item.type === 'income'){
							if(vm.credit['freq'] === null){
								
							}
							vm.credit.push({date:item.start_date, freq:{}});
						}
						else{
							vm.debit.push({date:item.start_date, freq:{}});
						}
					};
			});
			
			
			//
			vm.categorize_financial_type = function(){
				categorize_credit_data_by_date()
				.then(categorize_credit_data_by_account)
				.then(function(result){
					
				});
			};
			
			// categorize credit by date
			function categorize_credit_data_by_date(){
				var deferred = $q.defer();
				
				deferred.resolve({});
				return deferred.promise;
			};
			
			function categorize_credit_data_by_account(){
				var deferred = $q.defer();
				
				deferred.resolve({});
				return deferred.promise;
			};
			
			
			// categorize debit
			function categorize_debit_data(){
				var deferred = $q.defer();
				
				deferred.resolve({});
				return deferred.promise;
			};
		});
	};
	
	// ng-pagination
	$scope.currentPage = 1;
	$scope.pageSize = 5;
	// end of ng-pagination
};




/* pagination controller */
function PaginationController($scope) {
	$scope.pageChangeHandler = function(num) {
		console.log('page changed to ' + num);
	};
}



/* map handler */
// show leaflet map
var map;
$(function(){
	try {
		map.remove();
	} catch (err) {
		console.log(err);
	}

	try {
		var address = location;

		$
				.getJSON(
						'http://nominatim.openstreetmap.org/search?format=json&limit=1&q='
								+ 'Taipei, Taiwan',
						function(data) {

							$
									.each(
											data,
											function(key, val) {
												map = L
														.map('main_container', {zoomControl : false, attributionControl : false, dragging : false})
														.setView(
																[
																		val.lat,
																		val.lon ],
																13);

												// add an OpenStreetMap tile
												// layer
												L
														.tileLayer(
																'http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(
																map);

											});

						});
	} catch (err) {
		console.log(err);
	}
});
// end of show map


/* create information tree (currently for articles_tree and videos_tree) */
function create_tree(treeData) {
	
  // Calculate total nodes, max label length
  var totalNodes = 0;
  var maxLabelLength = 0;
  // variables for drag/drop
  var selectedNode = null;
  var draggingNode = null;
  // panning variables
  var panSpeed = 2000;
  var panBoundary = 50; // Within 20px from edges will pan when dragging.
  // Misc. variables
  var i = 0;
  var duration = 500;
  var root;

  // size of the diagram
  var viewerWidth = $(document).width();
  var viewerHeight = $(document).height();

  var tree = d3.layout.tree()
      .size([viewerHeight, viewerWidth]);

  // define a d3 diagonal projection for use by the node paths later on.
  var diagonal = d3.svg.diagonal()
      .projection(function(d) {
          return [d.y, d.x];
      });

  // A recursive helper function for performing some setup by walking through
	// all nodes
  function visit(parent, visitFn, childrenFn) {
      if (!parent) return;

      visitFn(parent);

      var children = childrenFn(parent);
      if (children) {
          var count = children.length;
          for (var i = 0; i < count; i++) {
              visit(children[i], visitFn, childrenFn);
          }
      }
  }

  // Call visit function to establish maxLabelLength
  visit(treeData, function(d) {
      totalNodes++;
      maxLabelLength = Math.max(d.name.length, maxLabelLength);

  }, function(d) {
      return d.children && d.children.length > 0 ? d.children : null;
  });


  // sort the tree according to the node names
  function sortTree() {
      tree.sort(function(a, b) {
          return b.name.toLowerCase() < a.name.toLowerCase() ? 1 : -1;
      });
  }
  // Sort the tree initially in case the JSON isn't in a sorted order.
  
  /* stop sorting */
  // sortTree();

  // Pan function, can be better implemented.
  function pan(domNode, direction) {
      var speed = panSpeed;
      if (panTimer) {
          clearTimeout(panTimer);
          translateCoords = d3.transform(svgGroup.attr("transform"));
          if (direction == 'left' || direction == 'right') {
              translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;
              translateY = translateCoords.translate[1];
          } else if (direction == 'up' || direction == 'down') {
              translateX = translateCoords.translate[0];
              translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;
          }
          scaleX = translateCoords.scale[0];
          scaleY = translateCoords.scale[1];
          scale = zoomListener.scale();
          svgGroup.transition().attr("transform", "translate(" + translateX + "," + translateY + ")scale(" + scale + ")");
          d3.select(domNode).select('g.node').attr("transform", "translate(" + translateX + "," + translateY + ")");
          zoomListener.scale(zoomListener.scale());
          zoomListener.translate([translateX, translateY]);
          panTimer = setTimeout(function() {
              pan(domNode, speed, direction);
          }, 50);
      }
  }

  // Define the zoom function for the zoomable tree
  function zoom() {
      svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
  }


  // define the zoomListener which calls the zoom function on the "zoom" event
	// constrained within the scaleExtents
  var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", zoom);

  function initiateDrag(d, domNode) {
      draggingNode = d;
      d3.select(domNode).select('.ghostCircle').attr('pointer-events', 'none');
      d3.selectAll('.ghostCircle').attr('class', 'ghostCircle show');
      d3.select(domNode).attr('class', 'node activeDrag');

      svgGroup.selectAll("g.node").sort(function(a, b) { // select the parent
															// and sort the
															// path's
          if (a.id != draggingNode.id) return 1; // a is not the hovered
													// element, send "a" to the
													// back
          else return -1; // a is the hovered element, bring "a" to the front
      });
      // if nodes has children, remove the links and nodes
      if (nodes.length > 1) {
          // remove link paths
          links = tree.links(nodes);
          nodePaths = svgGroup.selectAll("path.link")
              .data(links, function(d) {
                  return d.target.id;
              }).remove();
          // remove child nodes
          nodesExit = svgGroup.selectAll("g.node")
              .data(nodes, function(d) {
                  return d.id;
              }).filter(function(d, i) {
                  if (d.id == draggingNode.id) {
                      return false;
                  }
                  return true;
              }).remove();
      }

      // remove parent link
      parentLink = tree.links(tree.nodes(draggingNode.parent));
      svgGroup.selectAll('path.link').filter(function(d, i) {
          if (d.target.id == draggingNode.id) {
              return true;
          }
          return false;
      }).remove();

      dragStarted = null;
  }

  // define the baseSvg, attaching a class for styling and the zoomListener
  var baseSvg = d3.select("#tree-container").append("svg")
      .attr("width", viewerWidth)
      .attr("height", viewerHeight)
      .attr("class", "overlay")
      .call(zoomListener);


  // Define the drag listeners for drag/drop behaviour of nodes.
  dragListener = d3.behavior.drag()
      .on("dragstart", function(d) {
          if (d == root) {
              return;
          }
          dragStarted = true;
          nodes = tree.nodes(d);
          d3.event.sourceEvent.stopPropagation();
          // it's important that we suppress the mouseover event on the node
			// being dragged. Otherwise it will absorb the mouseover event and
			// the underlying node will not detect it
			// d3.select(this).attr('pointer-events', 'none');
      })
      .on("drag", function(d) {
          if (d == root) {
              return;
          }
          if (dragStarted) {
              domNode = this;
              initiateDrag(d, domNode);
          }

          // get coords of mouseEvent relative to svg container to allow for
			// panning
          relCoords = d3.mouse($('svg').get(0));
          if (relCoords[0] < panBoundary) {
              panTimer = true;
              pan(this, 'left');
          } else if (relCoords[0] > ($('svg').width() - panBoundary)) {

              panTimer = true;
              pan(this, 'right');
          } else if (relCoords[1] < panBoundary) {
              panTimer = true;
              pan(this, 'up');
          } else if (relCoords[1] > ($('svg').height() - panBoundary)) {
              panTimer = true;
              pan(this, 'down');
          } else {
              try {
                  clearTimeout(panTimer);
              } catch (e) {

              }
          }

          d.x0 += d3.event.dy;
          d.y0 += d3.event.dx;
          var node = d3.select(this);
          node.attr("transform", "translate(" + d.y0 + "," + d.x0 + ")");
          updateTempConnector();
      }).on("dragend", function(d) {
          if (d == root) {
              return;
          }
          domNode = this;
          if (selectedNode) {
              // now remove the element from the parent, and insert it into
				// the new elements children
              var index = draggingNode.parent.children.indexOf(draggingNode);
              if (index > -1) {
                  draggingNode.parent.children.splice(index, 1);
              }
              if (typeof selectedNode.children !== 'undefined' || typeof selectedNode._children !== 'undefined') {
                  if (typeof selectedNode.children !== 'undefined') {
                      selectedNode.children.push(draggingNode);
                  } else {
                      selectedNode._children.push(draggingNode);
                  }
              } else {
                  selectedNode.children = [];
                  selectedNode.children.push(draggingNode);
              }
              // Make sure that the node being added to is expanded so user
				// can see added node is correctly moved
              expand(selectedNode);
              sortTree();
              endDrag();
          } else {
              endDrag();
          }
      });

  function endDrag() {
      selectedNode = null;
      d3.selectAll('.ghostCircle').attr('class', 'ghostCircle');
      d3.select(domNode).attr('class', 'node');
      // now restore the mouseover event or we won't be able to drag a 2nd
		// time
      d3.select(domNode).select('.ghostCircle').attr('pointer-events', '');
      updateTempConnector();
      if (draggingNode !== null) {
          update(root);
          centerNode(draggingNode);
          draggingNode = null;
      }
  }

  // Helper functions for collapsing and expanding nodes.
  function collapse(d) {
      if (d.children) {
          d._children = d.children;
          d._children.forEach(collapse);
          d.children = null;
      }
  }

  function expand(d) {
      if (d._children) {
          d.children = d._children;
          d.children.forEach(expand);
          d._children = null;
      }
  }

  var overCircle = function(d) {
      selectedNode = d;
      updateTempConnector();
  };
  var outCircle = function(d) {
      selectedNode = null;
      updateTempConnector();
  };

  // Function to update the temporary connector indicating dragging
	// affiliation
  var updateTempConnector = function() {
      var data = [];
      if (draggingNode !== null && selectedNode !== null) {
          // have to flip the source coordinates since we did this for the
			// existing connectors on the original tree
          data = [{
              source: {
                  x: selectedNode.y0,
                  y: selectedNode.x0
              },
              target: {
                  x: draggingNode.y0,
                  y: draggingNode.x0
              }
          }];
      }
      var link = svgGroup.selectAll(".templink").data(data);

      link.enter().append("path")
          .attr("class", "templink")
          .attr("d", d3.svg.diagonal())
          .attr('pointer-events', 'none');

      link.attr("d", d3.svg.diagonal());

      link.exit().remove();
  };

  // Function to center node when clicked/dropped so node doesn't get lost
	// when collapsing/moving with large amount of children.
  function centerNode(source) {
      scale = zoomListener.scale();
      x = -source.y0;
      y = -source.x0;
      x = x * scale + viewerWidth / 2;
      y = y * scale + viewerHeight / 2;
      d3.select('g').transition()
          .duration(duration)
          .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
      zoomListener.scale(scale);
      zoomListener.translate([x, y]);
  }

  // Toggle children function

  function toggleChildren(d) {
      if (d.children) {
          d._children = d.children;
          d.children = null;
      } else if (d._children) {
          d.children = d._children;
          d._children = null;
      }
      return d;
  }

  // Toggle children on click.

  function click(d) {
      if (d3.event.defaultPrevented) return; // click suppressed
      if (typeof(d.link) !== 'undefined') {
      	window.open(d.link,'_blank');
      	}
      d = toggleChildren(d);
      update(d);
      centerNode(d);
  }

  function update(source) {
      // Compute the new height, function counts total children of root node
		// and sets tree height accordingly.
      // This prevents the layout looking squashed when new nodes are made
		// visible or looking sparse when nodes are removed
      // This makes the layout more consistent.
      var levelWidth = [1];
      var childCount = function(level, n) {

          if (n.children && n.children.length > 0) {
              if (levelWidth.length <= level + 1) levelWidth.push(0);

              levelWidth[level + 1] += n.children.length;
              n.children.forEach(function(d) {
                  childCount(level + 1, d);
              });
          }
      };
      childCount(0, root);
      var newHeight = d3.max(levelWidth) * 25; // 25 pixels per line
      tree = tree.size([newHeight, viewerWidth]);

      // Compute the new tree layout.
      var nodes = tree.nodes(root).reverse(),
          links = tree.links(nodes);

      // Set widths between levels based on maxLabelLength.
      nodes.forEach(function(d) {
          d.y = (d.depth * (maxLabelLength * 10)); // maxLabelLength * 10px
          // alternatively to keep a fixed scale one can set a fixed depth per
			// level
          // Normalize for fixed-depth by commenting out below line
          // d.y = (d.depth * 500); //500px per level.
      });

      // Update the nodes…
      node = svgGroup.selectAll("g.node")
          .data(nodes, function(d) {
              return d.id || (d.id = ++i);
          });

      // Enter any new nodes at the parent's previous position.
      var nodeEnter = node.enter().append("g")
          .call(dragListener)
          .attr("class", "node")
          .attr("transform", function(d) {
              return "translate(" + source.y0 + "," + source.x0 + ")";
          })
          .on('click', click);

      nodeEnter.append("circle")
          .attr('class', 'nodeCircle')
          .attr("r", 5)
          .style("fill", function(d) {
              return d._children ? "#fea628" : "#fff";
          });

      nodeEnter.append("text")
          .attr("x", function(d) {
              return d.children || d._children ? -20 : 20;
          })
          .attr("dy", ".35em")
          .attr('class', 'nodeText')
          .attr("text-anchor", function(d) {
              return d.children || d._children ? "end" : "start";
          })
          .text(function(d) {
              return d.name;
          })
          .style("fill-opacity", 0);

      // phantom node to give us mouseover in a radius around it
      nodeEnter.append("circle")
          .attr('class', 'ghostCircle')
          .attr("r", 20)
          .attr("opacity", 0.2) // change this to zero to hide the target area
      .style("fill", "red")
          .attr('pointer-events', 'mouseover')
          .on("mouseover", function(node) {
              overCircle(node);
          })
          .on("mouseout", function(node) {
              outCircle(node);
          });

      // Update the text to reflect whether node has children or not.
      node.select('text')
          .attr("x", function(d) {
              return d.children || d._children ? -20 : 20;
          })
          .attr("text-anchor", function(d) {
              return d.children || d._children ? "end" : "start";
          })
          .text(function(d) {
              return d.name;
          });

      // Change the circle fill depending on whether it has children and is
		// collapsed
      node.select("circle.nodeCircle")
          .attr("r", 8)
          .style("fill", function(d) {
              return d._children ? "#fea628" : "#fff";
          });

      // Transition nodes to their new position.
      var nodeUpdate = node.transition()
          .duration(duration)
          .attr("transform", function(d) {
              return "translate(" + d.y + "," + d.x + ")";
          });

      // Fade the text in
      nodeUpdate.select("text")
          .style("fill-opacity", 1);

      // Transition exiting nodes to the parent's new position.
      var nodeExit = node.exit().transition()
          .duration(duration)
          .attr("transform", function(d) {
              return "translate(" + source.y + "," + source.x + ")";
          })
          .remove();

      nodeExit.select("circle")
          .attr("r", 0);

      nodeExit.select("text")
          .style("fill-opacity", 0);

      // Update the links…
      var link = svgGroup.selectAll("path.link")
          .data(links, function(d) {
              return d.target.id;
          });

      // Enter any new links at the parent's previous position.
      link.enter().insert("path", "g")
          .attr("class", "link")
          .attr("d", function(d) {
              var o = {
                  x: source.x0,
                  y: source.y0
              };
              return diagonal({
                  source: o,
                  target: o
              });
          });

      // Transition links to their new position.
      link.transition()
          .duration(duration)
          .attr("d", diagonal);

      // Transition exiting nodes to the parent's new position.
      link.exit().transition()
          .duration(duration)
          .attr("d", function(d) {
              var o = {
                  x: source.x,
                  y: source.y
              };
              return diagonal({
                  source: o,
                  target: o
              });
          })
          .remove();

      // Stash the old positions for transition.
      nodes.forEach(function(d) {
          d.x0 = d.x;
          d.y0 = d.y;
      });
  }

  // Append a group which holds all nodes and which the zoom Listener can act
	// upon.
  var svgGroup = baseSvg.append("g");

  // Define the root
  root = treeData;
  root.x0 = viewerHeight / 2;
  root.y0 = 0;

  // Layout the tree initially and center on the root node.
  
  toggleChildren(root);
  update(root);
  centerNode(root);
};