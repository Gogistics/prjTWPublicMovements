particles_swarm_optimization = {
		config : {
			parameters_range : [[-15, 15],[-15, 15]], // ranges of particles
			particles_size : 20, // size of particles swarm
			iteration : 100, //iteration number
			max_min_factor : -1, // 1 means to find max; -1 means to find min
			Emax : Number.MAX_VALUE,
			Emin : -Number.MAX_VALUE,
			Type : 0, // 0 for real number; 1 for integer
			
			c1 : 2.05,
			c2 : 4.1 - 2.05, // c2 = 4.1 - c1
			c : 0.729, //constrain factor
			
			diff_ranges : [],
			low_boundaries : [],
			
			particels_values : [],
			particles_initial_values : [],
			
			particles_velocity : [],
			particles_initial_velocity : [], // can be zero or certain reasonable values based on each particle range

			performance_index_set : [],
			performance_initial_index_set : [],
			
			learning_rate : 0,
			min_learning_rate : 0.4, //minimum learning rate of social parameter
			max_learning_rate : 0.9, //maximum learning rate of social parameter
			c1_min : 1.9, //minimum learning rate of cognitive parameter
			c1_max : 2.1, //maximum learning rate of cognitive parameter
			
			min_cost : 0,
			mean_cost : 0,
			local_optimal : 0,
			index_local_optimal : 0,
			global_optimal : 0,
			index_global_optimal : 0,
			RMS_cost : 0
		},
		
		init_pso : function(){
			//
			var particles_swarm_size = this.config.particles_size;
			for (var ith = 0; ith < particles_swarm_size; ith++ ){

				var particle_values = [];
				var particle_velocity = [];
				var particle_parameters_length = this.config.parameters_range.length;
				for (var jth = 0; jth < particle_parameters_length ; jth++){
					//
					this.config.diff_ranges.push(this.config.parameters_range[jth][1] - this.config.parameters_range[jth][0]);
					this.config.low_boundaries.push(this.config.parameters_range[jth][0]);
					
					//
					var particle_value = this.config.parameters_range[jth][0] + Math.random()*(this.config.parameters_range[jth][1] - this.config.parameters_range[jth][0]);
					particle_values.push(particle_value.toFixed(5));
					particle_velocity.push(0); // let's assume the initial velocity is zero
				}
				

				//
				this.config.particels_values.push(particle_values);
				this.config.particles_initial_values.push(particle_values);
				
				//
				this.config.particles_velocity.push(particle_velocity);
				this.config.particles_initial_velocity.push(particle_velocity);
				
				//
				x1 = Number(particle_values[0]);
				x2 = Number(particle_values[1]);
				var PI = ((0.007 * x1 * (-x2-1)) *(Math.cos(x1 + 0.3)-Math.sin(x2))+(1 - Math.sin(x1))).toFixed(6);
				
				//
				this.config.performance_index_set.push(PI);
				this.config.performance_initial_index_set.push(PI);
			}

			//
			var init_min_cost = Math.min.apply(Math, this.config.performance_initial_index_set);
			this.config.min_cost = init_min_cost;
			console.log(init_min_cost);
			
			//
			var init_index_local_optimal = this.config.performance_initial_index_set.indexOf(init_min_cost);
			this.config.index_local_optimal = init_index_local_optimal;
			this.config.index_global_optimal = init_index_local_optimal;
			console.log(JSON.stringify(this.config.performance_initial_index_set,2,2));
			console.log(init_index_local_optimal);
			
			var initial_optimal_particle_values = this.config.particels_values[init_index_local_optimal];
			this.config.local_optimal = initial_optimal_particle_values;
			this.config.global_optimal = initial_optimal_particle_values;
			
		},
		
		start_optimization : function(){
			this.init_pso();
			//console.log(JSON.stringify(this.config.particels_values,2,2));
		}
}

// test
particles_swarm_optimization.start_optimization();