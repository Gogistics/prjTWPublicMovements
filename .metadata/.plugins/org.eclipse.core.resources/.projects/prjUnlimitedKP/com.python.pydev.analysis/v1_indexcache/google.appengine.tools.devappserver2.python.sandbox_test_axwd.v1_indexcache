_WHITE_LIST_C_MODULES
path_importer_cache
saved_pil
ReplayAll
pop
is_package
__loader__
test_find_module_not_whitelisted
builtins
assertEqual
etree
thread
test_is_package_not_package
PathRestrictingImportHookTest
assertIsInstance
assertNotIn
test_load_without_path_hook
test_load_module
copy
test_get_source
assertIn
PyCryptoRandomImportHook
assertIsNone
$
libs
test_c_module_not_accessible
under
getpid
ImportError
urllib
unused_fullname
test_c_module_accessible
test_disabled_modules
unittest
distutils
__init__
mox
saved_urllib
isinstance
dummy
bin
test_load_with_path_hook
os_error_not_implemented
C_BUILTIN
test_module_not_installed
execv
UnsetStubs
sys
use
httplib
numpy
ModuleType
PY_COMPILED
The
Apache
test_is_package_not_package_standard_lib
old_library_format_string
could
urlopen
Mox
_enable_libraries
load_module
usr
PIL
hard
lxmla
test_compiled_python_accessible
hooked_pil
f
lxml
may
a
test_enable_libraries_no_libraries
Inc
CModuleImportHook
join
test_find_module_not_whitelisted_enabled_via_libaries
replace
either
test_accessible
s
fake_module
r
library
apply_policy
Unless
to
libraries
runtime_config_pb2
distutils_modules
root
_THIRD_PARTY_LIBRARY_FORMAT_STRING
distributed
SandboxTest
apache
by
_MODULE_OVERRIDE_POLICIES
meta_path
added_modules
tearDown
software
get_source
__package__
webapp2
OSRNG
permissions
Version
dirname
be
application_root
agreed
AS
hook
test_compiled_python_not_accessible
so
__doc__
that
str
email
saved_lxml
hooked_os
walk
is_file_accessible
update
path_hooks
set
DummyPathHook
extra_sys_paths
governing
www
test_package_success
re
posix
test_find_module_disabled_module
new_module
test_enabled_c_library
name
implied
types
KIND
PathOverrideImportHook
__import__
law
You
test_get_source_does_not_exist
test_import_alread_in_sys_modules
__name__
find_module
at
zipped
you
test_get_code_standard_library
See
main
expected
source
py
sandbox
an
old_path
html
extra_accessible_paths
test_is_package_standard_lib
Google
ModuleOverrideImportHook
hooked_urllib
return_minus_one
SkipTest
nt
test
sandbox_test
foo
unlink
PY_FROZEN
of
open
file
config
on
fullname
startswith
test_find_module
os
__file__
test_is_package
__dict__
FakeFile
test_load_with_path_hook_cant_find
pyc
obtain
symbols
http
ModuleOverridePolicy
AndReturn
app_id
language
bar
might
Config
test_get_code
google
test_not_accessible
test_module_success
test_load_builtin_no_pass_through
express
org
WITHOUT
default_pass_through
__main__
version
old_meta_path
clear
PathRestrictingImportHook
PyCryptoRandomImportHookTest
compile
test_find_module_whitelisted
CONDITIONS
OF
Copyright
fake
just
assertTrue
app
module
test_c_builtin
hooked_lxml
env
version_id
OR
License
expected_code
assertFalse
test_load_already_in_sys_modules
insert
assertItemsEqual
imp
C_EXTENSION
test_get_code_does_not_exist
compliance
python
LICENSE
test_load_without_path_hook_not_found
tools
test_find_module_not_c_module
assertRaises
Crypto
value
test_find_module_enabled_module
required
PY_SOURCE
IS
devappserver2
WARRANTIES
imported_modules
__builtin__
TestCase
Tests
test_package_success_pil_in_sys_path
CModuleImportHookTest
this
util
test_is_package_does_not_exist
PathOverrideImportHookTest
test_policies
stubs
specific
StubOutWithMock
test_get_source_standard_library
limitations
writing
test_load_builtin_pass_through
licenses
object
applicable
add
app_root
super
dir
get_code
path
Licensed
read
test_os_module_policy
find
setUp
test_enable_libraries
check
standard
ANY
the
BASIS
appengine
ModuleOverrideImportHookTest
test_py_frozen
__path__
filename
Random
modules
found
