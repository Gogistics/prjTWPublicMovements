using
use_decimal
c_encode_basestring_ascii
Implement
_sort_keys
item_separator
float
references
allow_nan
compared
globals
search
something
detected
objects
these
_iterencode_dict
basestring
number
parse_float
superclass
isinstance
_inf
each
separator
array
compatibility
behavior
xff
could
recognize
write
do
_key_separator
ensure
f
tags
safe
g
e
b
keys
integer
a
converted
n
o
web
join
i
u
t
s
r
base
x
basis
selects
by
_iterencode
long
encodable
has
compact
would
any
_encoder
_use_decimal
xd800
make_encoder
key
be
get
markers
key_separator
script
setdefault
bytecode
items
Return
iterencode
day
example
amp
make
_speedups
aren
x3ff
Otherwise
typed
x10000
possible
following
An
types
all
members
makes
depend
backwards
which
PySequence_Fast
Override
dct
an
newline_indent
they
HACK
no
xdc00
otherwise
roughly
of
given
JSONEncoder
only
on
structure
support
PosInf
ESCAPE
_indent
guaranteed
sensible
newline
earlier
baz
benchmarks
http
them
then
compliant
will
bar
incoming
dictionaries
most
floats
ValueError
followed
JSONEncoderForHTML
clear
tests
inverse
serializations
supported
detailed
encoding
null
usual
weakly
JSON
true
ASCII
specified
_encoding
method
within
iter
encoders
markerid
cause
type
prior
Supports
level
more
HTML
value
useful
iterator
such
NaN
int
kv
called
If
this
equivalent
_orig_encoder
c_make_encoder
It
super
id
_one_shot
_default
_item_separator
it
extend
gets
into
ESCAPE_ASCII
list
implementation
locals
things
consistent
also
don
defaults
place
elements
hacks
chunks
Out
turn
_current_indent_level
To
iteritems
whitespace
ImportError
available
expanded
calls
entities
structures
content
__init__
_make_iterencode
decode
simply
nesting
specify
Encode
eliminate
FLOAT_REPR
sort
u0026
simple
data
The
_neginf
decoder
_iterencode_list
extremely
x80
Note
utf
seem
cannot
repeated
replace
string
internals
printed
produces
checked
to
arbitrary
encode_basestring_ascii
escaped
takes
values
_floatstr
key_memo
iterable
mysocket
text
so
Implementation
lst
that
input
str
than
attempt
decoders
sub
can
Extensible
strings
re
hand
KeyError
json
performance
implement
serializable
s2
s1
sorted
unicode
you
reference
encode_basestring
infinite
u003c
u003e
Infinity
chunk
check_circular
test
tuple
tag
regression
foo
skipkeys
circular
repr
are
accepted
Decimal
page
false
bigobject
processor
_import_speedups
platform
OverflowError
prevent
separators
like
without
many
say
range
pair
Many
ord
org
This
version
exceptions
serialized
optimized
compile
dicts
_skipkeys
cases
py_encode_basestring_ascii
should
x00
Constructor
based
ESCAPE_DCT
buf
simplejson
but
transformed
function
doesn
UTF
returns
directly
recursion
custom
encode
spaces
indent
sort_keys
ensure_ascii
sense
format
embed
specials
TypeError
x20
default
_repr
They
representation
subclass
match
output
JavaScript
characters
chr
floatstr
call
dict
other
allow
specific
object
complicated
encoded
x1f
pretty
surrogate
because
another
during
HAS_UTF8
newlines
For
Python
lists
encoder
Check
check
the
decimal
iterators
versions
skipped
specification
group
first
Circular
