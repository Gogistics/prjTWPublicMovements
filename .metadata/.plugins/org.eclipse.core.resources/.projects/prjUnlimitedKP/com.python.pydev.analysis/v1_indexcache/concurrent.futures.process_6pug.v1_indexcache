cpu_count
don
external
wait
flow
creates
garbage
until
Workers
references
time
concurrent
created
threads
thread
But
objects
fn
Thread
Out
openning
how
waiting
To
under
Reserved
_base
number
ImportError
effects
descriptors
calls
result_queue
reads
exc_info
__init__
system
Used
Evaluates
simply
work_item
big
Executor
_add_call_item_to_queue
_WorkItem
ways
executes
owns
RuntimeError
multiprocessing
set_result
executor_reference
killed
A
sys
installed
data
use
Work
instances
run
discard
Quinlan
running
scenarios
resulting
The
_queue_count
slightly
Q
with_statement
could
side
max_workers
call_item
written
map
worker
_
X
shutdown
f
Items
safe
g
may
e
Fills
a
n
threading
sweetapp
blocks
meaning
join
cannot
up
atexit
i
register
w
ref
new
t
s
r
p
down
_CallItem
_queue_manangement_worker
methods
to
queue
_WorkItems
com
brian
args
However
exception
by
cancel
has
after
_work_ids
consumed
Brian
would
future
Should
processing
derived
Queue
instance
be
follow
processes
execute
text
get
submit
tells
Call
Pool
__doc__
NOTE
numbered
shutdown_process_event
places
reduce
_shutdown_process_event
size
Implements
that
finish
BaseException
WorkItem
items
maximum
generated
than
make
_queue_management_thread
result
can
set
signal
through
Lock
kwargs
call_queue
Worker
Manages
waits
Initializes
uniquely
ProcessPoolExecutor
placed
too
deadlock
interpretor
updates
Local
communication
ids
New
still
memory
never
which
Contributor
there
an
daemon
handler
they
_adjust_process_count
no
_shutdown
_shutdown_thread
determine
otherwise
result_item
Since
_remove_dead_thread_references
filled
Empty
of
are
given
futures
fail
periodically
file
pending
describe
empty
on
is_set
_process_worker
Result
_ResultItem
done
cancelled
prevent
bad
exit
many
interpreter
start
then
will
__future__
some
small
Make
put
remove
range
Controls
_CallItems
weakref
_thread_references
block
mapping
Request
set_exception
This
idling
allowing
unpredictable
Copyright
Ids
frequently
kept
Future
files
collected
larger
evaluated
OS
len
No
stored
should
OR
process
idle
_start_queue_management_thread
_result_queue
item
queues
queued
__author__
being
adds
transformed
work_ids
All
used
workers
repackaged
been
function
looks
undesirable
more
results
shutting
puts
set_running_or_notify_cancel
Process
when
_call_queue
work_id
longer
Futures
pending_work_items
deletes
work
Shutdown
succeed
such
Event
int
leaks
properties
machine
Mac
PSF
Agreement
called
diagram
_max_workers
If
this
call
dict
In
allow
_processes
writing
object
add
_shutdown_lock
smaller
was
risk
because
id
inactive
Args
full
pool
during
callable
corresponding
Licensed
die
_pending_work_items
read
mean
Remove
between
EXTRA_QUEUED_CALLS
less
Rights
it
added
executor
evaluating
into
list
problem
the
processors
spend
around
two
schedule
seperate
ThreadPoolExecutor
thread_reference
entry
target
removed
local
work_ids_queue
_ResultItems
their
step
timeout
_python_exit
