need
Changes
using
store
higher
install_gettext_callables
until
over
time
free
globals
search
created
something
objects
MarkSafeIfAutoescape
__plural
engine
basestring
BSD
number
Team
extract
few
isinstance
comment_end_string
prefix
tuples
__string
comment_start_string
compatibility
__module__
unique
A
behavior
before
__context
handling
token_lineno
token
Create
current
do
_
parse
ensure
tags
block_begin
safe
may
d
e
c
a
n
i
install_gettext_translations
yes
WithExtension
register
t
s
what
r
inlinegettext
AST
p
newstyle
block_end_string
token_type
extracted
configuration
TRIM_BLOCKS
returned
Helper
comments
bound
x
body
variable_end_string
args
find_comments
by
parse_tuple
ugettext
same
enumerate
enough
has
gettext
auto_reload
invalid
priority
optional
any
_extract
LINE_COMMENT_PREFIX
consequence
key
be
Extensions
append
comma
keywords
get
templates
begins
finder
constants
code
extract_from_ast
setdefault
node
plural_names
items
names
Return
factory
example
make
update
Keyword
set
var
As
colon
plural
possible
style
especially
name
offset
fragment
all
By
functionality
idx
yields
have_plural
assigned
at
referenced
message
drop_needle
which
num_called_num
source
vars_referenced
an
there
attributes
parse_assign_target
bind
why
they
preprocessed
lower
endwith
reason
no
otherwise
anyways
Per
LoopControlExtension
of
errors
correct
given
empty
on
only
tokens
central
configure
itself
ExprStmt
creating
support
pluralization
_uninstall
attr
last_lineno
distribution
powerful
include
babel_extract
trans
preprocess
will
auto
comment_tags
comment
bar
AutoEscapeExtension
Environment
localizable
django
ValueError
InternationalizationExtension
encoding
allow_pluralize
internal
similar
ungettext
true
unknown
extension
additional
translator
nodes
implements
method
pointing
fileobj
single
deque
count
TemplateAssertionError
COMMENT_START_STRING
where
every
type
ext
python
set_lineno
more
level
results
value
useful
_CommentFinder
argument
iterator
newstyle_gettext
means
meant
here
ExtensionRegistry
Custom
embedded
ExtensionAttribute
expressions
VARIABLE_START_STRING
statement
flag
matching
_my_attribute
usable
called
translations
acting
If
exc
causes
this
Babel
jinja2
recognized
babel_style
scope
expansion
In
GETTEXT_FUNCTIONS
runtime
way
rstrip
includes
add
It
forwards
was
real
find_all
Can
allows
_install
read
it
added
endautoescape
_make_new_ngettext
extend
list
interface
concat
section
two
_parse_block
found
Extract
handle
don
passed
matched
overlays
pop
_install_null
matches
defaults
COMMENT_END_STRING
import_string
trim_blocks
copy
template
ExprStmtExtension
ends
cls
defined
getattr
iteritems
copyright
always
__class__
calls
variables
structures
__init__
system
decode
Because
lineno
terrible
split
load
Undefined
reevaluating
nicer
we
parse_expression
Mod
param
Pair
simple
next
meth
data
use
messages
The
figure
Const
best
__num
license
collections
Scope
Break
Gives
later
__metaclass__
Note
utilizes
utf
cannot
singular
works
up
replace
num
arguments
BLOCK_END_STRING
fragment_cache_prefix
variable_start_string
string
i18n
funcname
variable
checked
coding
cache_size
to
getbool
Output
good
identified
line_statement_prefix
must
after
Extension
eos
values
fooss
extractor
parameters
iterable
BLOCK_START_STRING
control
unable
Assign
so
filter_stream
Call
parse_statements
listening
extraction
explains
storing
that
vars
syntax
str
generated
than
case
rv
identifier
can
Continue
strings
dyn_args
well
kwargs
hand
Once
TODO
_make_new_gettext
translatable
Generates
multiple
too
Adds
functions
lexer
unicode
__name__
invocations
you
call_method
Basic
Dict
py
actual
Jinja2
provided
unclosed
out
assign
test
NEWLINE_SEQUENCE
tuple
accept
tag
bases
foo
extensions
expect
arg
are
fail
file
yourself
choose
extra
Take
block_start_string
like
assignments
__dict__
without
non
_install_callables
now
preceeding
dyn_kwargs
Additionally
frozenset
autoescape
stream
translation
operates
line
block
This
escape
exceptions
_make_node
sections
twice
reversed
One
want
options
just
lex
resolve
cache
placeholder
__singular
uninstall_gettext_translations
install_null_translations
dictionary
len
env
LINE_STATEMENT_PREFIX
stored
should
folder
really
singular_names
Parse
buf
autoescaping
TokenStream
allowed
parses
but
old
token_value
enable
Markup
adds
used
skip
function
doesn
skip_if
turned
func
returns
lexing
endtrans
extract_translations
VARIABLE_END_STRING
sure
custom
work
gettext_functions
TemplateSyntaxError
situations
versionadded
pluralize
linecomment
babel
mark
contextfunction
NotImplementedError
strip
__new__
variable_end
environment
default
block_end
clash
parser
filter
reassigning
eval_ctx
generic
call
other
allow
have
specific
one
state
attribute
find_backwards
expr
currently
object
loopcontrols
Jinja
shortcut
because
another
parameter
For
Python
exist
find
error
versionchanged
keyword
the
Token
_gettext_alias
ngettext
with_
rules
around
Name
variable_begin
skipped
utils
target
plural_expr
filename
line_comment_prefix
bool
their
ScopedEvalContextModifier
first
storage
