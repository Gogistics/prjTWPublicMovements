GetAccessTokenResponse
using
_DOMAIN_SEPARATOR
handle
external
wait
until
time
Raises
NotAllowed
Translate
domain_name
signature
copy
signing_for_app_result
memcache
_ah_app_identity_
timed
NOT_A_VALID_APP
expiration
basestring
Bucket
uncached
under
error_map
calls
apiproxy_stub_map
requested
__init__
system
isinstance
App
unspecified
gs
bin
apiproxy_errors
deadline
Provides
Base
typically
A
Pair
bucket
use
expiration_time
running
SignForAppRequest
Apache
The
sync
token
GetServiceAccountName
check_success
domain
do
_
usr
_GET_SERVICE_ACCOUNT_NAME_METHOD_NAME
get_service_account_name_result
safe
may
needs
converted
a
get_access_token_result
PublicCertificate
implemented
Inc
get_service_account_name
memcache_key
Most
RPC
either
InvalidScope
s
_MEMCACHE_NAMESPACE
backend
seconds
string
APPLICATION_ID
Get
public
returned
get_default_version_hostname
Unless
yet
behalf
to
Attributes
com
GetPublicCertificateForAppResponse
GetAccessToken
key_name
make_get_public_certificates_call
invocation
distributed
apache
by
GetDefaultGcsBucketName
long
GetServiceAccountNameResponse
completion
has
must
get_result
Tuple
set_bytes_to_sign
software
invalid
GetDefaultGcsBucketNameResponse
permissions
Invalid
instance
Version
GetDefaultGcsBucketNameRequest
key
be
_GET_CERTS_METHOD_NAME
append
agreed
AS
get
Gets
app_identity_service
hostname
display
service_account_id
make_get_access_token_call
DEADLINE_EXCEEDED
sign
that
BLOB_TOO_LARGE
expires_at
failure
associated
partitioned
str
than
example
result
Exception
full_app_id
Each
service_account_name
governing
www
about
strings
signature_bytes
Returns
UNKNOWN_ERROR
default_gcs_bucket_name
response
possible
dsep
set_deadline
waits
add_scope
GetAccessTokenRequest
name
implied
An
OperationNotImplemented
Generates
BackendDeadlineExceeded
KIND
law
functions
You
get_default_gcs_bucket_name
make_sign_blob_call
at
finished
you
See
Error
_GET_ACCESS_TOKEN_METHOD_NAME
__all__
message
which
invoke
an
err
service
Info
Google
success
out
cached
Service
get_public_certificates
tuple
app_identity
_PARTITION_SEPARATOR
Communication
NOT_ALLOWED
Executes
error_detail
BlobSizeTooLarge
_GET_DEFAULT_GCS_BUCKET_NAME_METHOD_NAME
InternalError
x509_certificate_pem
repr
of
operation
rpc
certificate
caches
are
sign_blob
file
empty
tokens
on
display_app_id
make_get_service_account_name_call
_ParseFullAppId
access_token
Default
limit
os
appspot
get_default_gcs_bucket_name_result
DEFAULT_VERSION_HOSTNAME
app_identity_service_pb
obtain
http
then
will
Access
app_id
application_error
language
GetPublicCertificateForAppRequest
AppIdentityServiceError
might
google
GetServiceAccountNameRequest
express
org
This
WITHOUT
expiry
version
has_default_gcs_bucket_name
exceptions
identity
cert
set_service_account_name
CONDITIONS
api
OF
Copyright
application_id
internal
get_access_token_uncached
public_certificate_list_list
app
post
cache
signed
get_application_id
larger
env
No
access
should
developers
my
_ah_
OR
pem
GetPublicCertificatesForApp
specified
License
bytes_to_sign
create_rpc
Parse
callback
account
method
translate
Signs
psep
allowed
make_get_default_gcs_bucket_name_call
_MEMCACHE_KEY_PREFIX
ApplicationError
_to_app_identity_error
make_call
contains
since
compliance
type
namespace
function
specialized
python
LICENSE
scopes
partition
signing
Unspecified
_SIGN_FOR_APP_METHOD_NAME
request
when
OAuth2
returns
required
Size
int
IS
get_certs_result
format
WARRANTIES
Storage
TypeError
NOT_IMPLEMENTED
SignForApp
default
UserRPC
SignForAppResponse
this
Optional
call
cerficiates
scope
hooks
specific
set_service_account_id
runtime
limitations
writing
licenses
object
add
applicable
Creates
id
get_access_token
API
Args
full
callable
corresponding
Licensed
For
memcache_value
find
certificates
UNKNOWN_SCOPE
getenv
Check
application
it
reuse
standard
ANY
error
epoch
your
into
list
x509
the
BASIS
async
blob
appengine
instead
their
act
first
_APP_IDENTITY_SERVICE_NAME
storage
