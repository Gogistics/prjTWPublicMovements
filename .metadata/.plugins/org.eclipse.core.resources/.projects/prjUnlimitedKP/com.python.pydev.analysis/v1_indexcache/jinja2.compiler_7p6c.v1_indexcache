nested
float
time
writeline
created
declared
event
right
generation
basestring
BSD
Team
sdummy
Raised
few
conditions
initialization
frames
lines
dynamic
unique
A
callers
debug
visited
l_super
times
inline
_
visit_FloorDiv
tags
f
d
b
c
a
n
join
recurse
i
register
new
t
s
Enable
r
sequence
collects
x
resources
root
exception
TemplateReference
enumerate
return_buffer_contents
has
invalid
processing
l_self
derived
append
comma
visit_Template
far
code
Visit
processed
node
items
visit_Sub
names
make
occour
val
update
named
As
through
visit_EnvironmentAttribute
write_expr2
possible
accesses_kwargs
func_frame
statements
name
An
tries
real_identifiers
markup_join
Template
shadowed
assigned
compilation
assertion
__all__
moved
never
which
advantage
source
start_write
take
visit_For
inside
there
l_kwargs
accessed
visit_Include
otherwise
Those
help
overhead
given
ctx
parent_block
reset
becaus
_last_identifier
Register
intercepted_binops
var_names
debug_info
newline
will
branch
__future__
Impossible
filters
explicitly
tracked
extra_kwargs
anonymous
__html__
tests
unless
accesses_varargs
visiting
reciter
rather
visit_FilterBlock
gteq
SyntaxError
exclude
No
generic_visit
Slice
dict_item_iter
hasattr
method
aliasing
calculating
buffered
visit_Div
visit_TemplateData
identifiers
finds
EvalContext
where
iteration
python
root_render_func
extened
Frame
required
visit_Output
argument
extends
easier
here
visit_Macro
requires
macro_frame
visit_CondExpr
If
exc
In
visit_Mul
assignment_frame
writing
It
super
macro_body
find_all
automatically
outdent
getvalue
find_shadowed
NotImplemented
added
alias
new_context
visit_Getattr
into
declared_locally
visit_Dict
problem
subnode
visit_Const
looked
locals
also
CompilerExit
step
appear
unassigned
nice
visit_ExprStmt
call_binop
checks
Identifiers
extra_vars
predefines
basically
visit_Import
Outdent
copy
template
with_context
static
visit_FromImport
contents
under
Calls
Happened
visit_Keyword
calls
variables
__init__
_body_stream
lineno
nesting
dummy
ugly
RuntimeError
complex
param
get_or_select_template
use
simple_write
deferred
We
written
TemplateNotFound
license
filter_frame
visit_MarkSafe
delayed
Compiles
back
utf
helpers
works
visit_InternalName
arguments
block_frame
Generate
Indent
push_scope
argumetns
become
is_declared
exported
extender
visit_And
Tuple
Add
visit_Concat
iterable
iter_child_nodes
declaration
visit_Call
visit_Mod
modified
render
shares
optimize
Tracks
kwarg_workaround
vars
syntax
XXX
case
identifier
early
parentheses
Exception
generate
can
expr1
expr2
children
dyn_args
kwargs
child
unoptimize_before_dead_code
toplevel_assignments
multiple
add_special
regular
Restore
sorted
__name__
extended
general
anything
registered
bypass
declared_parameter
kwarg
macros
assign
tuple
pull_locals
zero
extensions
info
tree
sandboxed
unused
lteq
startswith
mainly
extra
like
assignments
__dict__
non
many
visit_Extends
now
start
test_frame
closure
dyn_kwargs
some
inspect
Additionally
outside
frozenset
autoescape
stream
remove
xrange
line
block
mapping
switch
aliases
This
escape
exceptions
twice
revert
dependencies
delete
probably
function_scoping
end
options
just
toplevel
module
resolve
forward_caller
overrides
defer_init
let
Holds
evaluated
func_name
len
already
FrameIdentifierVisitor
process
_indentation
loop_render_func
chain
compiler
bug
find_undeclared
Handles
allowed
End
but
reading
if_frame
visit_Getitem
All
used
visit_Break
outer_undeclared
namespace
function
LICENSE
dependency
doesn
longer
func
visit_Block
sure
UndeclaredNameVisitor
visit_Compare
have_extends
goes
situations
visit_ScopedEvalContextModifier
status
format
limitation
__new__
binop
Names
representation
known
varargs
output
eval_ctx
call
Any
scope_frame
setattr
Disable
breaks
slices
temporary
currently
solution
Jinja
shortcut
because
Yield
details
select_template
Python
check
definition
keyword
inheritance
around
soft
Name
utils
target
special
started
contextfilter
Combination
need
visit_Scope
using
store
visit
missing
over
references
getitem
Extends
DependencyFinderVisitor
something
temporary_identifier
extends_so_far
l_varargs
parent
number
further
requested
isinstance
gt
accesses_caller
go
before
_first_write
execution
stops
faster
division
could
Create
current
write
loop
map
import_
left
Expression
do
leaking
optimizations
checking
safe
readable
may
max
needs
end_write
blocks
operator
imports
eg
what
nothing
exists
inner_visit
Get
eq
expression
body
However
args
pop_scope
by
long
same
close
_last_line
is_python_keyword
block_
would
future
any
dead
key
be
rootlevel
keywords
templates
get
likely
Ellipsis
bytecode
setdefault
visit_Name
differently
recursive
Return
example
arg_tuple
enforce
thing
does
remember
set
visit_Test
safely
ident
Write
intercepted_unops
to_delete
List
all
export
idx
at
message
Does
Writes
see
an
envenv
why
visit_Tuple
have_condexpr
they
Walk
as_const
enclosed
no
l_caller
outermost
fixed
of
macro
correct
on
only
branches
move
outdent_later
op
attr
include
them
different
caller
accessing
visit_ExtensionAttribute
evaluate
const
has_safe_repr
lt
undeclared
Visiting
macro_def
func_closure
situation
collected
true
visit_Filter
nodes
itertools
ne
item
obj
iter
last
save
being
imp
TemplateAssertionError
actually
buffer
level
more
when
value
notin
iterator
such
int
cStringIO
TemplateRuntimeError
statement
called
this
l_
jinja2
scope
runtime
standalone
add
includes
throwing
was
environmentfilter
CodeGenerator
StringIO
real
extended_loop
Can
find_special
generator
deepcopy
less
between
test_old_bugs
Reason
those
it
extend
list
concat
know
section
human
loop_frame
uaop
two
safed_ctx
removed
wrong
necessary
local
found
passed
don
get_template
included_template
call_frame
defaults
visit_ImportedName
NodeVisitor
finalize
LoopContext
points
place
happen
signature
chunks
volatile
visit_MarkSafeIfAutoescape
defined
getattr
iteritems
overriden_closure_vars
copyright
__class__
visit_Continue
Because
leading
coming
load
discarded_names
we
visit_If
Pull
common
next
data
ignore_missing
discard
differences
Macro
imported
Unused
The
loops
figure
visit_Add
Const
difference_
visit_List
debugging
hard
accepts
Block
buffering
onwards
us
cannot
unicode_join
reasonable
up
replace
_new_lines
symmetric_difference
string
part
variable
coding
abort
to
affects
raises
both
inner
pull
t_
takes
to_string
parameters
welcome
however
so
_write_debug_info
Call
msg
that
frame
str
generated
than
require
rv
rsplit
created_block_context
Statement
catch
signal
well
re
old_ctx_name
iterate
importname
else_
undefined
visit_Neg
too
top
functions
Various
unicode
public_names
force_generator
out
to_declare
visit_EvalContextModifier
test
visit_Not
tag
technical
open
arg
repr
are
fail
initial
evalcontextfilter
require_output_check
make_module
false
ops
indentation
information
form
Fail
create
without
visit_ContextReference
registry
test_loop_call_bug
position
might
encountered
visit_Slice
Stop
mode
identity
pull_dependencies
compile
VisitorExit
fake
simplify
want
trigger
visit_Pow
visit_Pos
visit_Operand
access
should
visitor
point
exported_vars
fall
users
Dump
Markup
l_loop
code_lineno
scopes
visit_Or
old_names
returns
visit_Assign
scoped
work
indent
Find
sense
ImportedName
visit_CallBlock
TypeError
environment
Simple
call_unop
parent_template
filter
stop
dict
iteration_indicator
allow
have
one
expr
object
blockvisit
parameter
order
newlines
fix
has_known_extends
operators
pulled
find
Check
assigned_names
error
circumstances
locally
Visitors
interceptable
import_aliases
the
unoptimize_scope
outer
context
confuse
filename
assume
bool
__copy__
