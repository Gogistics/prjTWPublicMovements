Key
backends
its
failing
CacheKeyWarning
missing
time
defaults
copy
alternate
Memcached
once
getattr
default_timeout
always
Defaults
key_func_module
__init__
each
specify
TIMEOUT
Base
decr
behavior
data
use
key_func
faster
times
warnings
import_module
d
keys
a
Function
supplied
k
new
s
r
backend
importlib
_cull_frequency
Warn
to
methods
portable
provide
fetching
MEMCACHE_MAX_KEY_LENGTH
exception
by
same
has
key_prefix
values
VERSION
would
Add
validate_key
KEY_FUNCTION
Set
delete_many
key
be
get
so
code
much
that
items
than
alternatively
rsplit
does
val
cull_frequency
generate
can
set
about
Subtract
Returns
key_func_module_path
response
_max_entries
An
bunch
multiple
all
Adds
By
functionality
separate
prepends
at
you
make_key
get_many
which
an
Substracts
provided
core
certain
OPTIONS
has_key
expired
accept
otherwise
of
errors
silently
given
itself
pgsql
Default
pairs
delta
incr_version
new_key
will
__future__
different
get_key_func
__contains__
InvalidCacheBackendError
django
ord
MAX_ENTRIES
mapping
ValueError
This
version
clear
exceptions
delete
BaseCache
rather
construction
options
DjangoRuntimeWarning
just
cache
overrides
len
already
stored
Constructs
method
force
but
cause
char
contains
used
function
memcached
more
unicode_literals
default_key_func
when
value
longer
Delete
custom
new_value
int
Cache
NotImplementedError
key_func_name
Fetch
CULL_FREQUENCY
TypeError
default
subclass
max_entries
even
encourages
ImproperlyConfigured
If
this
characters
efficient
warn
decide
dict
other
writing
calling
object
add
was
decr_version
callable
making
For
Remove
exist
it
params
the
utils
set_many
uses
incr
KEY_PREFIX
timeout
found
